# Reference: https://crunchydata.github.io/postgres-operator/latest/custom-resources/

ccpimage: crunchy-postgres-ha
ccpimageprefix: registry.developers.crunchydata.com/crunchydata
ccpimagetag: centos8-13.1-4.6.0
# customConfig: references a custom ConfigMap to use when bootstrapping a PostgreSQL cluster.
# see https://crunchydata.github.io/postgres-operator/latest/advanced/custom-configuration/
customConfig: ""
# keepBackups: if true, the pgBackRest PVC is kept if the cluster is deleted
keepBackups: false
# keepData: if true, the PostgreSQL data PVC is kept if the cluster is deleted
keepData: false
# fullnameOverride: 'my-app'
namespace: default
metrics:
  # metrics.enable: if true, deploys the crunchy-postgres-exporter sidecar for metrics collection
  enable: true

pgoVersion: 4.6.0
port: 5432

resources:
  limits: {}
  requests: {}

# shutdown: if true, indicates that the cluster should be shut down (otherwise, running)
shutdown: false

# any unspecified values and/or storage types will use values from 'default'
storage: 
  backrest: {}
  default:
    accessmode: "ReadWriteOnce"
    fsgroup: ""
    matchLabels: ""
    name: ""
    size: "1G"
    storageclass: ""
    storagetype: "dynamic"
    supplementalgroups: ""
  primary: {}
  replica: {}

# User accounts to create secrets for. If not specified, the operator will create these

# admin postgres account
superUser:
  sealedUsername: ""
  sealedPassword: ""
# standard user
dbUser:  
  sealedUsername: ""
  sealedPassword: ""
  # dbUser.username: plain-text username, must match sealed version above (defaults to cluster name)
  username: ""
# primary user for replication, defaults are probably fine since it isn't needed by end-users
replicationUser: {}
  # sealedUsername: ...
  # sealedPassword: ...

tls:
  # tls.sealedCa: certificate authority for the PostgreSQL cluster to trust, encrypted by SealedSecrets
  sealedCa: ""
  # tls.sealedCrt: TLS certificate for the PostgreSQL cluster, encrypted by SealedSecrets
  sealedCrt: ""
  # tls.enabled: if true, enable TLS (ca and crt must be provided in that case)
  enabled: false
  # tls.sealedKey: TLS key for the PostgreSQL cluster, encrypted by SealedSecrets
  sealedKey: ""
  # tls.required: if true, requires client connections to use only TLS to connect to the PostgreSQL database
  required: false